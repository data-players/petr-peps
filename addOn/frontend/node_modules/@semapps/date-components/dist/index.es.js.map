{"version":3,"file":"index.es.js","sources":["../src/utils.js","../src/Picker.js","../src/useFullCalendarProps.js","../src/CalendarList.js","../src/DaysList.js","../src/index.js"],"sourcesContent":["const leftPad = (nb = 2) => value => ('0'.repeat(nb) + value).slice(-nb);\nconst leftPad4 = leftPad(4);\nconst leftPad2 = leftPad(2);\n\n// yyyy-MM-ddThh:mm\nconst dateTimeRegex = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}$/;\n\n/**\n * @param {Date} value value to convert\n * @returns {String} A standardized datetime (yyyy-MM-ddThh:mm), to be passed to an <input type=\"datetime-local\" />\n */\nconst convertDateToString = value => {\n  if (!(value instanceof Date) || isNaN(value.getDate())) {\n    return '';\n  }\n\n  const yy = leftPad4(value.getFullYear());\n  const MM = leftPad2(value.getMonth() + 1);\n  const dd = leftPad2(value.getDate());\n  const hh = leftPad2(value.getHours());\n  const mm = leftPad2(value.getMinutes());\n  return `${yy}-${MM}-${dd}T${hh}:${mm}`;\n};\n\n/**\n * Converts a date from the Redux store, with timezone, to a date string\n * without timezone for use in an <input type=\"datetime-local\" />.\n *\n * @param {Date | String} value date string or object\n */\nexport const dateTimeFormatter = value => {\n  // null, undefined and empty string values should not go through convertDateToString\n  // otherwise, it returns undefined and will make the input an uncontrolled one.\n  if (value == null || value === '') {\n    return '';\n  }\n\n  if (value instanceof Date) {\n    return convertDateToString(value);\n  }\n\n  // valid dates should not be converted\n  if (dateTimeRegex.test(value)) {\n    return value;\n  }\n\n  return convertDateToString(new Date(value));\n};\n\n/**\n * Converts a datetime string without timezone to a date object\n * with timezone, using the browser timezone.\n *\n * @param {String} value Date string, formatted as yyyy-MM-ddThh:mm\n * @return {Date}\n */\nexport const dateTimeParser = value => (value ? new Date(value) : '');\n","import React, { useCallback } from 'react';\nimport { useInput, FieldTitle, InputHelperText } from 'react-admin';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\nimport { dateTimeFormatter, dateTimeParser } from './utils';\n\nconst Picker = ({\n  PickerComponent,\n  format = dateTimeFormatter,\n  label,\n  source,\n  helperText,\n  onBlur,\n  onChange,\n  onFocus,\n  parse = dateTimeParser,\n  validate,\n  defaultValue,\n  locale,\n  pickerVariant = 'dialog',\n  stringFormat = 'ISO',\n  allowClear,\n  ...rest\n}) => {\n  const {\n    field,\n    isRequired,\n    fieldState: { error, isTouched }\n  } = useInput({\n    format,\n    onBlur,\n    onChange,\n    onFocus,\n    parse,\n    source,\n    validate,\n    ...rest\n  });\n\n  const handleChange = useCallback(value => {\n    Date.parse(value)\n      ? field.onChange(stringFormat === 'ISO' ? value.toISOString() : value.toString())\n      : field.onChange(null);\n  }, []);\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={locale}>\n      <PickerComponent\n        label={<FieldTitle label={label} source={source} isRequired={isRequired} />}\n        error={!!(isTouched && error)}\n        slotProps={{\n          textField: {\n            helperText: <InputHelperText touched={isTouched} error={error} helperText={helperText} />\n          },\n        }}\n        {...sanitizeRestProps(rest)}\n        value={field.value ? new Date(field.value) : null}\n        onChange={handleChange}\n        onBlur={() =>\n          field.onBlur(\n            field.value\n              ? stringFormat === 'ISO'\n                ? new Date(field.value).toISOString()\n                : new Date(field.value).toString()\n              : null\n          )\n        }\n      />\n    </LocalizationProvider>\n  );\n};\n\nPicker.defaultProps = {\n  isRequired: false,\n  meta: { isTouched: false, error: false },\n  locale: undefined, // Default to english\n  parse: value => (value === '' ? null : value) // Avoid saving an empty string in the dataset\n};\n\nconst sanitizeRestProps = ({\n  allowEmpty,\n  alwaysOn,\n  component,\n  defaultValue,\n  format,\n  formClassName,\n  initialValue,\n  initializeForm,\n  input,\n  isRequired,\n  label,\n  limitChoicesToValue,\n  locale,\n  meta,\n  options,\n  optionText,\n  optionValue,\n  parse,\n  source,\n  textAlign,\n  translate,\n  translateChoice,\n  labelTime,\n  ...rest\n}) => rest;\n\n\nexport default Picker;\n","import React, { useMemo, useCallback } from 'react';\nimport { useSearchParams, useNavigate } from 'react-router-dom';\nimport { useListContext, useCreatePath } from 'react-admin';\n\nconst useFullCalendarProps = ({ label, startDate, endDate, linkType }) => {\n  const { data, isLoading, resource } = useListContext();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const createPath = useCreatePath();\n\n  let query = new URLSearchParams(location.search);\n\n  // Bypass the link in order to use React-Router\n  const eventClick = useCallback(({ event, jsEvent }) => {\n    jsEvent.preventDefault();\n    navigate(event.url);\n  }, []);\n\n  // Change the query string when month change\n  const datesSet = useCallback(\n    ({ view }) => {\n      setSearchParams(params => ({ ...params, month: view.currentStart.getMonth() + 1, year: view.currentStart.getFullYear() }));\n    },\n    [setSearchParams]\n  );\n\n  const events = useMemo(\n    () =>\n      !isLoading &&\n      data\n        .filter(record => record)\n        .map(record => ({\n          id: record.id,\n          title: typeof label === 'string' ? record[label] : label(record),\n          start: typeof startDate === 'string' ? record[startDate] : startDate(record),\n          end: typeof endDate === 'string' ? record[endDate] : endDate(record),\n          url: createPath({ resource, id: record.id, type: linkType })\n        })),\n    [isLoading, data, resource, createPath]\n  );\n\n  return {\n    initialDate: query.has('month') ? new Date(query.get('year'), query.get('month') - 1) : new Date(),\n    events,\n    datesSet,\n    eventClick\n  };\n};\n\nexport default useFullCalendarProps;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport { useTheme } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport useFullCalendarProps from './useFullCalendarProps';\n\nconst useGlobalStyles = makeStyles(theme => ({\n  '@global': {\n    '.fc-button': {\n      backgroundColor: theme.palette.primary.main + ' !important',\n      border: 'none !important',\n      opacity: '1 !important'\n    },\n    '.fc-day-today': {\n      backgroundColor: theme.palette.secondary.light + ' !important'\n    },\n    // Overwrite violet color of links\n    'a.fc-daygrid-dot-event': {\n      color: 'black !important'\n    }\n  }\n}));\n\nconst CalendarList = props => {\n  const theme = useTheme();\n  const fullCalendarProps = useFullCalendarProps(props);\n  useGlobalStyles();\n\n  return (\n    <FullCalendar\n      plugins={[dayGridPlugin]}\n      locale={props.locale}\n      initialView=\"dayGridMonth\"\n      eventBackgroundColor={theme.palette.primary.main}\n      {...fullCalendarProps}\n    />\n  );\n};\n\nCalendarList.defaultProps = {\n  linkType: 'edit'\n};\n\nexport default CalendarList;\n","import React from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport listPlugin from '@fullcalendar/list';\nimport makeStyles from '@mui/styles/makeStyles';\nimport useFullCalendarProps from './useFullCalendarProps';\n\nconst useGlobalStyles = makeStyles(theme => ({\n  '@global': {\n    '.fc-button': {\n      backgroundColor: theme.palette.primary.main + ' !important',\n      border: 'none !important',\n      opacity: '1 !important'\n    }\n  }\n}));\n\nconst DaysList = props => {\n  const fullCalendarProps = useFullCalendarProps(props);\n  useGlobalStyles();\n\n  return <FullCalendar plugins={[listPlugin]} locale={props.locale} initialView=\"listMonth\" {...fullCalendarProps} />;\n};\n\nDaysList.defaultProps = {\n  linkType: 'edit'\n};\n\nexport default DaysList;\n","import React from 'react';\nimport Picker from './Picker';\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nimport { DateTimePicker } from '@mui/x-date-pickers/DateTimePicker';\n\nconst DateInput = props => <Picker PickerComponent={DatePicker} {...props} />;\nconst TimeInput = props => <Picker PickerComponent={TimePicker} {...props} />;\nconst DateTimeInput = props => <Picker PickerComponent={DateTimePicker} {...props} />;\n\nexport { DateInput, TimeInput, DateTimeInput };\n\nexport { default as CalendarList } from './CalendarList';\nexport { default as DaysList } from './DaysList';\nexport { default as useFullCalendarProps } from './useFullCalendarProps';\n"],"names":["leftPad","nb","value","repeat","slice","leftPad4","leftPad2","dateTimeRegex","convertDateToString","Date","isNaN","getDate","yy","getFullYear","MM","getMonth","dd","hh","getHours","mm","getMinutes","concat","dateTimeFormatter","test","dateTimeParser","Picker","_ref","PickerComponent","_ref$format","format","label","source","helperText","onBlur","onChange","onFocus","_ref$parse","parse","validate","defaultValue","locale","pickerVariant","_ref$stringFormat","stringFormat","allowClear","rest","_objectWithoutProperties","_excluded","_useInput","useInput","_objectSpread","field","isRequired","_useInput$fieldState","fieldState","error","isTouched","handleChange","useCallback","toISOString","toString","React","LocalizationProvider","dateAdapter","AdapterDateFns","adapterLocale","_extends","FieldTitle","slotProps","textField","InputHelperText","touched","sanitizeRestProps","defaultProps","meta","undefined","_ref2","allowEmpty","alwaysOn","component","formClassName","initialValue","initializeForm","input","limitChoicesToValue","options","optionText","optionValue","textAlign","translate","translateChoice","labelTime","_excluded2","useFullCalendarProps","startDate","endDate","linkType","_useListContext","useListContext","data","isLoading","resource","_useSearchParams2","_slicedToArray","useSearchParams","setSearchParams","navigate","useNavigate","createPath","useCreatePath","query","URLSearchParams","location","search","eventClick","event","jsEvent","preventDefault","url","datesSet","_ref3","view","params","month","currentStart","year","events","useMemo","filter","record","map","id","title","start","end","type","initialDate","has","get","useGlobalStyles","makeStyles","theme","@global",".fc-button","backgroundColor","palette","primary","main","border","opacity",".fc-day-today","secondary","light","a.fc-daygrid-dot-event","color","CalendarList","props","useTheme","fullCalendarProps","FullCalendar","plugins","dayGridPlugin","initialView","eventBackgroundColor","DaysList","listPlugin","DateInput","DatePicker","TimeInput","TimePicker","DateTimeInput","DateTimePicker"],"mappings":"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"}