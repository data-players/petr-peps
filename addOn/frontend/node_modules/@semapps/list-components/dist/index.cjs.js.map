{"version":3,"file":"index.cjs.js","sources":["../src/ChipList.js","../src/GridList.js","../src/MasonryList.js","../src/ReferenceFilter.js","../src/MultiViewsList/ListViewContext.js","../src/MultiViewsList/ViewsButtons.js","../src/MultiViewsList/ListActionsWithViews.js","../src/MultiViewsList/MultiViewsList.js"],"sourcesContent":["import React from 'react';\nimport {\n  ChipField,\n  useCreatePath,\n  useListContext,\n  sanitizeListRestProps,\n  RecordContextProvider,\n  Link\n} from 'react-admin';\nimport { LinearProgress } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport AddCircleIcon from '@mui/icons-material/AddCircle';\nimport LaunchIcon from '@mui/icons-material/Launch';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  link: {\n    textDecoration: 'none',\n    maxWidth: '100%'\n  },\n  chipField: {\n    maxWidth: '100%'\n  },\n  addIcon: {\n    cursor: 'pointer',\n    fontSize: 35,\n    position: 'relative',\n    top: 2\n  },\n  launchIcon: {\n    width: 20,\n    paddingRight: 6,\n    marginLeft: -10\n  }\n}));\n\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst ChipList = props => {\n  const {\n    classes: classesOverride,\n    className,\n    children,\n    linkType = 'edit',\n    component = 'div',\n    primaryText,\n    appendLink,\n    externalLinks = false,\n    ...rest\n  } = props;\n  const { data, isLoading, resource } = useListContext(props);\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n\n  const classes = useStyles(props);\n  const Component = component;\n\n  if (isLoading) return <LinearProgress />;\n\n  return (\n    <Component className={classes.root} {...sanitizeListRestProps(rest)}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const externalLink = getExternalLink(record);\n        if (externalLink) {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <a\n                href={externalLink}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className={classes.link}\n                onClick={stopPropagation}\n              >\n                <ChipField\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  deleteIcon={<LaunchIcon className={classes.launchIcon} />}\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                  // Required to display the delete icon\n                  onDelete={handleClick}\n                />\n              </a>\n            </RecordContextProvider>\n          );\n        } else if (linkType) {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <Link className={classes.link} to={createPath({ resource, id: record.id, type: linkType })} onClick={stopPropagation}>\n                <ChipField\n                  source={primaryText}\n                  className={classes.chipField}\n                  color=\"secondary\"\n                  // Workaround to force ChipField to be clickable\n                  onClick={handleClick}\n                />\n              </Link>\n            </RecordContextProvider>\n          );\n        } else {\n          return (\n            <RecordContextProvider value={record} key={record.id}>\n              <ChipField\n                source={primaryText}\n                className={classes.chipField}\n                color=\"secondary\"\n                // Workaround to force ChipField to be clickable\n                onClick={handleClick}\n              />\n            </RecordContextProvider>\n          );\n        }\n      })}\n      {appendLink && <AddCircleIcon color=\"primary\" className={classes.addIcon} onClick={appendLink} />}\n    </Component>\n  );\n};\n\nexport default ChipList;\n","import * as React from 'react';\nimport { useListContext, useCreatePath, Link, RecordContextProvider } from 'react-admin';\nimport { Grid } from '@mui/material';\nimport { useGetExternalLink } from '@semapps/semantic-data-provider';\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\n// Our handleClick does nothing as we wrap the children inside a Link but it is\n// required by ChipField, which uses a Chip from material-ui.\n// The material-ui Chip requires an onClick handler to behave like a clickable element.\nconst handleClick = () => {};\n\nconst GridList = ({ children, linkType, externalLinks, spacing, xs, sm, md, lg, xl }) => {\n  const { data, resource, isLoading } = useListContext();\n  const getExternalLink = useGetExternalLink(externalLinks);\n  const createPath = useCreatePath();\n  if (isLoading || !data) return null;\n  return (\n    <Grid container spacing={spacing}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const externalLink = getExternalLink(record);\n        let child;\n\n        if (externalLink) {\n          child = (\n            <a href={externalLink} target=\"_blank\" rel=\"noopener noreferrer\" onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                externalLink: true,\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </a>\n          );\n        } else if (linkType) {\n          child = (\n            <Link to={createPath({ resource, id: record.id, type: linkType })} onClick={stopPropagation}>\n              {React.cloneElement(React.Children.only(children), {\n                // Workaround to force ChipField to be clickable\n                onClick: handleClick\n              })}\n            </Link>\n          );\n        } else {\n          child = children;\n        }\n\n        return (\n          <Grid item key={record.id} xs={xs} sm={sm} md={md} lg={lg} xl={xl}>\n            <RecordContextProvider value={record}>\n              {child}\n            </RecordContextProvider>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridList.defaultProps = {\n  xs: 6,\n  spacing: 3,\n  linkType: 'edit',\n  externalLinks: false\n};\n\nexport default GridList;\n","import React from 'react';\nimport { useListContext, Link, useCreatePath, RecordContextProvider } from 'react-admin';\nimport { Card, CardActionArea, CardMedia, CardContent, CardActions } from '@mui/material';\nimport makeStyles from '@mui/styles/makeStyles';\nimport Masonry from 'react-masonry-css';\n\nconst useStyles = makeStyles(() => ({\n  grid: {\n    display: 'flex',\n    marginLeft: -20,\n    marginBottom: -20,\n    width: 'auto'\n  },\n  column: {\n    paddingLeft: 20,\n    backgroundClip: 'padding-box'\n  },\n  card: {\n    marginBottom: 20\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%' // 16:9\n  }\n}));\n\n/**\n * @example\n * <List component=\"div\" perPage={50} {...props}>\n *   <MasonryList\n *     image={record => record.image}\n *     content={record => (\n *       <>\n *         <Typography variant=\"subtitle1\">{record.title}</Typography>\n *         <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">{record.description}</Typography>\n *       </>\n *     )}\n *     linkType=\"show\"\n *   />\n * </List>\n */\nconst MasonryList = ({ image, content, actions, breakpointCols, linkType }) => {\n  const classes = useStyles();\n  const { data, resource } = useListContext();\n  const createPath = useCreatePath();\n  return (\n    <Masonry breakpointCols={breakpointCols} className={classes.grid} columnClassName={classes.column}>\n      {data.map(record => {\n        if (!record || record['_error']) return null;\n        const imageUrl = typeof image === 'function' ? image(record) : image;\n        return (\n          <RecordContextProvider value={record}>\n            <Card key={record.id} className={classes.card}>\n              <Link to={createPath({ resource, id: record.id, type: linkType })}>\n                <CardActionArea>\n                  {imageUrl && <CardMedia className={classes.media} image={imageUrl} />}\n                  {content && <CardContent>{content(record)}</CardContent>}\n                </CardActionArea>\n              </Link>\n              {actions && (\n                <CardActions>\n                  {actions.map(action => React.createElement(action))}\n                </CardActions>\n              )}\n            </Card>\n          </RecordContextProvider>\n        );\n      })}\n    </Masonry>\n  );\n};\n\nMasonryList.defaultProps = {\n  breakpointCols: { default: 3, 1050: 2, 700: 1 },\n  linkType: 'edit'\n};\n\nexport default MasonryList;\n","import React, { useEffect } from 'react';\nimport { FilterList, FilterListItem, useGetList, useResourceContext, useListContext, useResourceDefinition } from 'react-admin';\nimport { useContainers, useDataModel } from '@semapps/semantic-data-provider';\n\n/**\n * @example\n * const FilterAside = () => (\n *   <Card>\n *     <CardContent>\n *       <FilterLiveSearch source=\"pair:label\" />\n *       <ReferenceFilter reference=\"Theme\" source=\"pair:hasTopic\" inverseSource=\"pair:topicOf\" />\n *       <ReferenceFilter reference=\"Skill\" source=\"pair:offers\" inverseSource=\"pair:offeredBy\" />\n *     </CardContent>\n *   </Card>\n * );\n */\n\nconst ReferenceFilterCounter = ({ source, id }) => {\n  const resourceContext = useResourceContext();\n  const { data, isLoading } = useGetList(resourceContext);\n  return (\n    <>\n      &nbsp;\n      { ! isLoading &&\n        <span className=\"filter-count\">{'(' + Object.values(data).filter(d => ([].concat(d[source])).includes(id)).length + ')'}</span>\n      }\n    </>\n  );\n};\n\nconst ReferenceFilter = ({ reference, source, inverseSource, limit, sort, filter, label, icon, showCounters }) => {\n  const { data, isLoading } = useGetList(reference, { page: 1, perPage: limit }, sort, filter);\n  const currentResource = useResourceDefinition({resource: reference});\n  const resourceContext = useResourceContext();\n  const resourceContextDataModel = useDataModel(resourceContext);\n  const resourceContextContainers = useContainers(resourceContext);\n\n  const {\n    displayedFilters,\n    filterValues,\n    setFilters,\n    hideFilter\n  } = useListContext();\n  useEffect(() => {\n    // Needed when filter item is active and its last relation is removed\n    const urlSearchParams = new URLSearchParams(window.location.search);\n    const params = Object.fromEntries(urlSearchParams.entries());\n    if (! params.filter && ! isLoading) {\n      setFilters({});\n    }\n  }, []);\n  \n  const itemIsUsed = (itemData) => {\n    if (!inverseSource) {\n      return true;\n    }\n    if (!resourceContextContainers || !itemData) {\n      return false;\n    }\n    let itemIsUsed = false;\n    Object.values(resourceContextContainers).forEach(value => {\n      value.forEach(containerUrl => {\n        [].concat(itemData[inverseSource]).forEach(inverseSourceData => {\n          if (inverseSourceData?.startsWith(containerUrl)) {\n            itemIsUsed = true;\n          }\n        })\n      })\n    });\n    return itemIsUsed;\n  }\n  \n  return (\n    <FilterList\n      label={label || currentResource?.options?.label || ''}\n      icon={icon || currentResource?.icon ? React.createElement(currentResource.icon) : undefined}\n    >\n      {data && data\n        .filter(itemData => itemIsUsed(itemData))\n        .map(itemData => (\n          <FilterListItem\n            key={itemData.id}\n            label={\n              <span className=\"filter-label\">\n                {itemData['pair:label']}\n                {showCounters && <ReferenceFilterCounter source={source} id={itemData.id} />}\n              </span>\n            }\n            value={{ [source]: itemData.id }}\n          />\n        ))}\n    </FilterList>\n  );\n};\n\nReferenceFilter.defaultProps = {\n  limit: 25,\n  showCounters: true\n};\n\nexport default ReferenceFilter;\n","import React from 'react';\n\nconst ListViewContext = React.createContext({ views: null, currentView: null, setView: () => null });\n\nexport default ListViewContext;\n","import React from 'react';\nimport { Button, Link } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListViewContext from './ListViewContext';\n\nconst ViewsButtons = () => {\n  const query = new URLSearchParams(useLocation().search);\n  const { views, currentView, setView } = React.useContext(ListViewContext);\n  return views\n    ? Object.entries(views)\n        .filter(([key]) => key !== currentView)\n        .map(([key, view]) => {\n          query.set('view', key);\n          query.set('page', 1);\n          query.set('perPage', view.perPage);\n          if (view.sort) {\n            query.set('sort', view.sort.field);\n            query.set('order', view.sort.order);\n          }\n          return (\n            <Link key={key} to={'?' + query.toString()}>\n              <Button onClick={() => setView(key)} label={view.label}>\n                {React.createElement(view.icon)}\n              </Button>\n            </Link>\n          );\n        })\n    : null;\n};\n\nexport default ViewsButtons;\n","import React from 'react';\nimport { CreateButton, ExportButton, useResourceDefinition, TopToolbar, useResourceContext } from 'react-admin';\nimport { useMediaQuery } from '@mui/material';\nimport ViewsButtons from './ViewsButtons';\n\nconst ListActionsWithViews = ({\n  bulkActions,\n  basePath,\n  sort,\n  displayedFilters,\n  exporter,\n  filters,\n  filterValues,\n  onUnselectItems,\n  selectedIds,\n  showFilter,\n  total,\n  ...rest\n}) => {\n  const xs = useMediaQuery(theme => theme.breakpoints.down('sm'));\n  const resourceDefinition = useResourceDefinition(rest);\n  return (\n    <TopToolbar>\n      <ViewsButtons />\n      {filters &&\n        React.cloneElement(filters, {\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: 'button'\n        })}\n      {resourceDefinition.hasCreate && <CreateButton />}\n      {!xs && exporter !== false && (\n        <ExportButton\n          disabled={total === 0}\n          sort={sort}\n          filter={filterValues}\n          exporter={exporter}\n        />\n      )}\n      {bulkActions &&\n        React.cloneElement(bulkActions, {\n          filterValues,\n          selectedIds,\n          onUnselectItems\n        })}\n    </TopToolbar>\n  );\n};\n\nexport default ListActionsWithViews;\n","import React, { useState } from 'react';\nimport { List } from 'react-admin';\nimport { useLocation } from 'react-router';\nimport ListActionsWithViews from './ListActionsWithViews';\nimport ListViewContext from './ListViewContext';\n\nconst MultiViewsList = ({ children, actions, views, ListComponent, ...otherProps }) => {\n  const query = new URLSearchParams(useLocation().search);\n  const initialView = query.has('view') ? query.get('view') : Object.keys(views)[0];\n  const [currentView, setView] = useState(initialView);\n  return (\n    <ListViewContext.Provider value={{ views, currentView, setView }}>\n      <ListComponent\n        actions={actions}\n        pagination={views[currentView].pagination}\n        // Set initial values, but use the query string to change these values to avoid a complete refresh\n        perPage={views[initialView].perPage}\n        sort={views[initialView].sort}\n        {...otherProps}\n      >\n        {views[currentView].list}\n      </ListComponent>\n    </ListViewContext.Provider>\n  );\n};\n\nMultiViewsList.defaultProps = {\n  actions: <ListActionsWithViews />,\n  ListComponent: List\n};\n\nexport default MultiViewsList;\n"],"names":["useStyles","makeStyles","root","display","flexWrap","link","textDecoration","maxWidth","chipField","addIcon","cursor","fontSize","position","top","launchIcon","width","paddingRight","marginLeft","stopPropagation","e","handleClick","GridList","_ref","children","linkType","externalLinks","spacing","xs","sm","md","lg","xl","_useListContext","useListContext","data","resource","isLoading","getExternalLink","useGetExternalLink","createPath","useCreatePath","React","Grid","container","map","record","child","externalLink","createElement","href","target","rel","onClick","cloneElement","Children","only","Link","to","id","type","item","key","RecordContextProvider","value","defaultProps","grid","marginBottom","column","paddingLeft","backgroundClip","card","media","height","paddingTop","MasonryList","image","content","actions","breakpointCols","classes","Masonry","className","columnClassName","imageUrl","Card","CardActionArea","CardMedia","CardContent","CardActions","action","default","1050","700","ReferenceFilterCounter","source","resourceContext","useResourceContext","useGetList","Fragment","Object","values","filter","d","concat","includes","length","ReferenceFilter","_ref2","_currentResource$opti","reference","inverseSource","limit","sort","label","icon","showCounters","page","perPage","currentResource","useResourceDefinition","useDataModel","resourceContextContainers","useContainers","displayedFilters","filterValues","setFilters","hideFilter","useEffect","urlSearchParams","URLSearchParams","window","location","search","fromEntries","entries","FilterList","options","undefined","itemData","itemIsUsed","forEach","containerUrl","inverseSourceData","startsWith","FilterListItem","ListViewContext","createContext","views","currentView","setView","ViewsButtons","query","useLocation","_React$useContext","useContext","_slicedToArray","_ref3","_ref4","view","set","field","order","toString","Button","ListActionsWithViews","bulkActions","basePath","exporter","filters","onUnselectItems","selectedIds","showFilter","total","rest","_objectWithoutProperties","_excluded","useMediaQuery","theme","breakpoints","down","resourceDefinition","TopToolbar","context","hasCreate","CreateButton","ExportButton","disabled","MultiViewsList","ListComponent","otherProps","initialView","has","get","keys","_useState2","useState","Provider","_extends","pagination","list","List","props","_props$linkType","component","_props$component","primaryText","appendLink","_props$externalLinks","Component","LinearProgress","sanitizeListRestProps","ChipField","color","deleteIcon","LaunchIcon","onDelete","AddCircleIcon"],"mappings":"m5EAeMA,EAAYC,EAAU,SAAC,WAAA,MAAO,CAClCC,KAAM,CACJC,QAAS,OACTC,SAAU,QAEZC,KAAM,CACJC,eAAgB,OAChBC,SAAU,QAEZC,UAAW,CACTD,SAAU,QAEZE,QAAS,CACPC,OAAQ,UACRC,SAAU,GACVC,SAAU,WACVC,IAAK,GAEPC,WAAY,CACVC,MAAO,GACPC,aAAc,EACdC,YAAa,QAIXC,EAAkB,SAAAC,GAAC,OAAIA,EAAED,mBAKzBE,EAAc,aCvCdF,EAAkB,SAAAC,GAAC,OAAIA,EAAED,mBAKzBE,EAAc,aAEdC,EAAW,SAAwEC,GAAA,IAArEC,IAAAA,SAAUC,IAAAA,SAAUC,IAAAA,cAAeC,IAAAA,QAASC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAAIC,IAAAA,GAC9EC,EAAsCC,EAAAA,iBAA9BC,IAAAA,KAAMC,IAAAA,SAAUC,IAAAA,UAClBC,EAAkBC,qBAAmBb,GACrCc,EAAaC,EAAAA,gBACnB,OAAIJ,IAAcF,EAAa,KAE7BO,gBAACC,OAAD,CAAMC,WAAN,EAAgBjB,QAASA,GACtBQ,EAAKU,KAAI,SAAAC,GACR,IAAKA,GAAUA,EAAM,OAAY,OAAO,KACxC,IACIC,EADEC,EAAeV,EAAgBQ,GA0BrC,OAtBEC,EADEC,EAEAN,EAAAO,cAAA,IAAA,CAAGC,KAAMF,EAAcG,OAAO,SAASC,IAAI,sBAAsBC,QAASlC,GACvEuB,EAAMY,aAAaZ,EAAMa,SAASC,KAAKhC,GAAW,CACjDwB,cAAc,EAEdK,QAAShC,KAINI,EAEPiB,gBAACe,OAAD,CAAMC,GAAIlB,EAAW,CAAEJ,SAAAA,EAAUuB,GAAIb,EAAOa,GAAIC,KAAMnC,IAAa4B,QAASlC,GACzEuB,EAAMY,aAAaZ,EAAMa,SAASC,KAAKhC,GAAW,CAEjD6B,QAAShC,KAKPG,EAIRkB,gBAACC,OAAD,CAAMkB,MAAN,EAAWC,IAAKhB,EAAOa,GAAI/B,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,GAC7DU,gBAACqB,wBAAD,CAAuBC,MAAOlB,GAC3BC,SASfzB,EAAS2C,aAAe,CACtBrC,GAAI,EACJD,QAAS,EACTF,SAAU,OACVC,eAAe,GC1DjB,IAAMzB,EAAYC,EAAU,SAAC,WAAA,MAAO,CAClCgE,KAAM,CACJ9D,QAAS,OACTc,YAAa,GACbiD,cAAe,GACfnD,MAAO,QAEToD,OAAQ,CACNC,YAAa,GACbC,eAAgB,eAElBC,KAAM,CACJJ,aAAc,IAEhBK,MAAO,CACLC,OAAQ,EACRC,WAAY,cAmBVC,EAAc,SAA2DpD,GAAA,IAAxDqD,IAAAA,MAAOC,IAAAA,QAASC,IAAAA,QAASC,IAAAA,eAAgBtD,IAAAA,SACxDuD,EAAU/E,IAChBgC,EAA2BC,EAAAA,iBAAnBC,IAAAA,KAAMC,IAAAA,SACRI,EAAaC,EAAAA,gBACnB,OACEC,wBAACuC,UAAD,CAASF,eAAgBA,EAAgBG,UAAWF,EAAQd,KAAMiB,gBAAiBH,EAAQZ,QACxFjC,EAAKU,KAAI,SAAAC,GACR,IAAKA,GAAUA,EAAM,OAAY,OAAO,KACxC,IAAMsC,EAA4B,mBAAVR,EAAuBA,EAAM9B,GAAU8B,EAC/D,OACElC,wBAACqB,wBAAD,CAAuBC,MAAOlB,GAC5BJ,wBAAC2C,OAAD,CAAMvB,IAAKhB,EAAOa,GAAIuB,UAAWF,EAAQT,MACvC7B,wBAACe,OAAD,CAAMC,GAAIlB,EAAW,CAAEJ,SAAAA,EAAUuB,GAAIb,EAAOa,GAAIC,KAAMnC,KACpDiB,wBAAC4C,iBAAD,KACGF,GAAY1C,wBAAC6C,YAAD,CAAWL,UAAWF,EAAQR,MAAOI,MAAOQ,IACxDP,GAAWnC,EAAAA,QAACO,cAAAuC,EAADA,iBAAcX,EAAQ/B,MAGrCgC,GACCpC,EAAAA,QAAAO,cAACwC,EAADA,YAAA,KACGX,EAAQjC,KAAI,SAAA6C,GAAM,OAAIhD,EAAK,QAACO,cAAcyC,cAW7Df,EAAYV,aAAe,CACzBc,eAAgB,CAAEY,QAAS,EAAGC,KAAM,EAAGC,IAAK,GAC5CpE,SAAU,QCzDZ,IAAMqE,EAAyB,SAAoBvE,GAAA,IAAjBwE,IAAAA,OAAQpC,IAAAA,GAClCqC,EAAkBC,EAAAA,qBACIC,EAAAA,EAAUA,WAACF,GAA/B7D,IAAAA,KAAME,IAAAA,UACd,OACEK,UAAAO,cAAAP,EAAA,QAAAyD,SAAA,KAAA,KAEM9D,GACFK,UAAAO,cAAA,OAAA,CAAMiC,UAAU,gBAAgB,IAAMkB,OAAOC,OAAOlE,GAAMmE,QAAO,SAAAC,GAAC,MAAK,GAAGC,OAAOD,EAAER,IAAUU,SAAS9C,MAAK+C,OAAS,OAMtHC,EAAkB,SAA0FC,GAAA,IAAAC,EAAvFC,IAAAA,UAAWf,IAAAA,OAAQgB,IAAAA,cAAeC,IAAAA,MAAOC,IAAAA,KAAMX,IAAAA,OAAQY,IAAAA,MAAOC,IAAAA,KAAMC,IAAAA,aACjElB,EAAAA,EAAUA,WAACY,EAAW,CAAEO,KAAM,EAAGC,QAASN,GAASC,EAAMX,GAA7EnE,IAAAA,KAAME,IAAAA,UACRkF,EAAkBC,EAAAA,sBAAsB,CAACpF,SAAU0E,IACnDd,EAAkBC,EAAAA,qBACSwB,EAAAA,aAAazB,GAC9C,IAAM0B,EAA4BC,gBAAc3B,GAEhD/D,EAKIC,EAAAA,mBAJF0F,mBACAC,iBACAC,IAAAA,aACAC,WAEFC,EAAAA,WAAU,WAER,IAAMC,EAAkB,IAAIC,gBAAgBC,OAAOC,SAASC,QAC7CjC,OAAOkC,YAAYL,EAAgBM,WACrCjC,QAAYjE,GACvByF,EAAW,MAEZ,IAsBH,OACEpF,wBAAC8F,aAAD,CACEtB,MAAOA,IAASK,MAAAA,GAAA,QAAJV,EAAIU,EAAiBkB,eAAjB,IAAA5B,OAAJ,EAAIA,EAA0BK,QAAS,GACnDC,KAAMA,GAAQI,MAAAA,GAAAA,EAAiBJ,KAAOzE,EAAAA,QAAMO,cAAcsE,EAAgBJ,WAAQuB,GAEjFvG,GAAQA,EACNmE,QAAO,SAAAqC,GAAQ,OA1BH,SAACA,GAClB,IAAK5B,EACH,OAAO,EAET,IAAKW,IAA8BiB,EACjC,OAAO,EAET,IAAIC,GAAa,EAUjB,OATAxC,OAAOC,OAAOqB,GAA2BmB,SAAQ,SAAA7E,GAC/CA,EAAM6E,SAAQ,SAAAC,GACZ,GAAGtC,OAAOmC,EAAS5B,IAAgB8B,SAAQ,SAAAE,GACrCA,MAAAA,GAAAA,EAAmBC,WAAWF,KAChCF,GAAa,YAKdA,EASiBA,CAAWD,MAC9B9F,KAAI,SAAA8F,GAAQ,OACXjG,wBAACuG,iBAAD,CACEnF,IAAK6E,EAAShF,GACduD,MACExE,EAAAA,QAAAO,cAAA,OAAA,CAAMiC,UAAU,gBACbyD,EAAS,cACTvB,GAAgB1E,wBAACoD,EAAD,CAAwBC,OAAQA,EAAQpC,GAAIgF,EAAShF,MAG1EK,SAAU+B,KAAAA,IAAS4C,EAAShF,oHAOxCgD,EAAgB1C,aAAe,CAC7B+C,MAAO,GACPI,cAAc,GC/FhB,IAAM8B,EAAkBxG,EAAK,QAACyG,cAAc,CAAEC,MAAO,KAAMC,YAAa,KAAMC,QAAS,WAAA,OAAM,QCGvFC,EAAe,WACnB,IAAMC,EAAQ,IAAItB,gBAAgBuB,EAAAA,cAAcpB,QAChDqB,EAAwChH,EAAAA,QAAMiH,WAAWT,GAAjDE,IAAAA,MAAOC,IAAAA,YAAaC,IAAAA,QAC5B,OAAOF,EACHhD,OAAOmC,QAAQa,GACZ9C,QAAO,SAAA/E,GAAA,OAAAqI,EAAArI,EAAA,GAAA,KAAmB8H,KAC1BxG,KAAI,SAAiBgH,GAAA,IAAAC,EAAAF,EAAAC,EAAA,GAAf/F,EAAegG,EAAA,GAAVC,EAAUD,EAAA,GAQpB,OAPAN,EAAMQ,IAAI,OAAQlG,GAClB0F,EAAMQ,IAAI,OAAQ,GAClBR,EAAMQ,IAAI,UAAWD,EAAKzC,SACtByC,EAAK9C,OACPuC,EAAMQ,IAAI,OAAQD,EAAK9C,KAAKgD,OAC5BT,EAAMQ,IAAI,QAASD,EAAK9C,KAAKiD,QAG7BxH,wBAACe,OAAD,CAAMK,IAAKA,EAAKJ,GAAI,IAAM8F,EAAMW,YAC9BzH,wBAAC0H,SAAD,CAAQ/G,QAAS,WAAA,OAAMiG,EAAQxF,IAAMoD,MAAO6C,EAAK7C,OAC9CxE,EAAK,QAACO,cAAc8G,EAAK5C,WAKpC,sJCtBAkD,EAAuB,SAavB9I,GAZJ+I,IAAAA,IAAAA,cACAC,aACAtD,IAAAA,KACAW,IAAAA,iBACA4C,IAAAA,SACAC,IAAAA,QACA5C,IAAAA,aACA6C,IAAAA,gBACAC,IAAAA,YACAC,IAAAA,WACAC,IAAAA,MACGC,EACCC,EAAAxJ,EAAAyJ,GACEpJ,EAAKqJ,iBAAc,SAAAC,GAAK,OAAIA,EAAMC,YAAYC,KAAK,SACnDC,EAAqB7D,wBAAsBsD,GACjD,OACEpI,EAAC,QAAAO,cAAAqI,aACC,KAAA5I,EAAAA,QAAAO,cAACsG,EADH,MAEGkB,GACC/H,EAAAA,QAAMY,aAAamH,EAAS,CAC1BG,WAAAA,EACAhD,iBAAAA,EACAC,aAAAA,EACA0D,QAAS,WAEZF,EAAmBG,WAAa9I,EAAAA,sBAAC+I,EAAAA,aAAD,OAC/B7J,IAAmB,IAAb4I,GACN9H,EAAAA,sBAACgJ,EAAAA,aAAD,CACEC,SAAoB,IAAVd,EACV5D,KAAMA,EACNX,OAAQuB,EACR2C,SAAUA,IAGbF,GACC5H,UAAMY,aAAagH,EAAa,CAC9BzC,aAAAA,EACA8C,YAAAA,EACAD,gBAAAA,uDCtCJkB,EAAiB,SAAgErK,KAA7DC,aAAUsD,IAAAA,QAASsE,IAAAA,MAAOyC,IAAAA,cAAkBC,EAAiBf,EAAAxJ,EAAAyJ,GAC/ExB,EAAQ,IAAItB,gBAAgBuB,EAAAA,cAAcpB,QAC1C0D,EAAcvC,EAAMwC,IAAI,QAAUxC,EAAMyC,IAAI,QAAU7F,OAAO8F,KAAK9C,GAAO,GAC/E+C,EAAAvC,EAA+BwC,EAAQA,SAACL,GAAxC,GAAO1C,EAAP8C,EAAA,GAAoB7C,EAApB6C,EAAA,GACA,OACEzJ,UAAAO,cAACiG,EAAgBmD,SAAjB,CAA0BrI,MAAO,CAAEoF,MAAAA,EAAOC,YAAAA,EAAaC,QAAAA,IACrD5G,wBAACmJ,EAADS,EAAA,CACExH,QAASA,EACTyH,WAAYnD,EAAMC,GAAakD,WAE/BjF,QAAS8B,EAAM2C,GAAazE,QAC5BL,KAAMmC,EAAM2C,GAAa9E,MACrB6E,GAEH1C,EAAMC,GAAamD,QAM5BZ,EAAe3H,aAAe,CAC5Ba,QAASpC,EAAC,QAAAO,cAAAoH,EADkB,MAE5BwB,cAAeY,EAAAA,uBPmBA,SAAAC,GAWXA,EATF1H,QASE0H,EARFxH,UAQEwH,EAPFlL,aAOEkL,EAAAA,EANFjL,SAAAA,aAAW,OAJbkL,EAUID,EAAAA,EALFE,UAAAA,aAAY,MALdC,EAMEC,EAIEJ,EAJFI,YACAC,EAGEL,EAHFK,WAGEL,EAAAA,EAFFhL,cAAAA,cARFsL,EASKlC,IACD4B,EAVJ1B,GAWsC9I,EAAAA,EAAcA,eAACwK,GAA7CvK,IAAAA,KAAME,IAAAA,UAAWD,IAAAA,SACnBE,EAAkBC,qBAAmBb,GACrCc,EAAaC,EAAAA,gBAEbuC,EAAU/E,EAAUyM,GACpBO,EAAYL,EAElB,OAAIvK,EAAkBK,EAAA,QAAAO,cAACiK,EAADA,eAAP,MAGbxK,wBAACuK,EAADX,EAAA,CAAWpH,UAAWF,EAAQ7E,MAAUgN,EAAAA,sBAAsBrC,IAC3D3I,EAAKU,KAAI,SAAAC,GACR,IAAKA,GAAUA,EAAM,OAAY,OAAO,KACxC,IAAME,EAAeV,EAAgBQ,GACrC,OAAIE,EAEAN,wBAACqB,wBAAD,CAAuBC,MAAOlB,EAAQgB,IAAKhB,EAAOa,IAChDjB,EAAA,QAAAO,cAAA,IAAA,CACEC,KAAMF,EACNG,OAAO,SACPC,IAAI,sBACJ8B,UAAWF,EAAQ1E,KACnB+C,QAASlC,GAETuB,wBAAC0K,YAAD,CACErH,OAAQ+G,EACR5H,UAAWF,EAAQvE,UACnB4M,MAAM,YACNC,WAAY5K,EAAAA,sBAAC6K,UAAD,CAAYrI,UAAWF,EAAQjE,aAE3CsC,QAAShC,EAETmM,SAAUnM,MAKTI,EAEPiB,wBAACqB,wBAAD,CAAuBC,MAAOlB,EAAQgB,IAAKhB,EAAOa,IAChDjB,wBAACe,OAAD,CAAMyB,UAAWF,EAAQ1E,KAAMoD,GAAIlB,EAAW,CAAEJ,SAAAA,EAAUuB,GAAIb,EAAOa,GAAIC,KAAMnC,IAAa4B,QAASlC,GACnGuB,wBAAC0K,YAAD,CACErH,OAAQ+G,EACR5H,UAAWF,EAAQvE,UACnB4M,MAAM,YAENhK,QAAShC,MAOfqB,wBAACqB,wBAAD,CAAuBC,MAAOlB,EAAQgB,IAAKhB,EAAOa,IAChDjB,wBAAC0K,YAAD,CACErH,OAAQ+G,EACR5H,UAAWF,EAAQvE,UACnB4M,MAAM,YAENhK,QAAShC,QAMlB0L,GAAcrK,wBAAC+K,EAAAA,QAAD,CAAeJ,MAAM,UAAUnI,UAAWF,EAAQtE,QAAS2C,QAAS0J"}