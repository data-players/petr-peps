{"version":3,"file":"index.es.js","sources":["../src/ImageInput.js","../src/OptionRenderer.js","../src/MultiServerAutocompleteArrayInput.js","../src/MultiServerAutocompleteInput.js","../src/MultiLinesInput.js","../src/ReferenceArrayInput.js","../src/ReferenceInput.js"],"sourcesContent":["import React from 'react';\nimport { ImageInput as RaImageInput } from 'react-admin';\n\n// Since we overwrite FileInput default parse, we must transform the file\n// See https://github.com/marmelab/react-admin/blob/2d6a1982981b0f1882e52dd1a974a60eef333e59/packages/ra-ui-materialui/src/input/FileInput.tsx#L57\nconst transformFile = file => {\n  const preview = URL.createObjectURL(file);\n  return ({\n    rawFile: file,\n    src: preview,\n    title: file.name,\n  });\n};\n\nconst format = v => {\n  if (typeof v === 'string') {\n    return ({ src: v });\n  } else if ( Array.isArray(v) ) {\n    return v.map(e => typeof e === 'string' ? { src: e } : e);\n  } else {\n    return v;\n  }\n}\n\nconst parse = v => {\n  if (v instanceof File) {\n    return transformFile(v);\n  } else if (v && v.src && !v.rawFile) {\n    return v.src;\n  } else if (Array.isArray(v)) {\n    return v.map(e => parse(e));\n  } else {\n    return v;\n  }\n}\n\nconst ImageInput = (props) => (\n  <RaImageInput {...props} format={format} parse={parse} />\n);\n\nexport default ImageInput;\n","import React from 'react';\nimport { useRecordContext } from 'react-admin';\n\nconst OptionRenderer = ({ optionText, dataServers }) => {\n  const record = useRecordContext();    \n  const server = dataServers && Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n  return (\n    <span>\n      {record[optionText]}\n      {server && (\n        <em className=\"serverName\" style={{ color: 'grey' }}>\n          &nbsp;({server.name})\n        </em>\n      )}\n    </span>\n  );\n};\n\nexport default OptionRenderer;\n","import React, { useCallback } from 'react';\nimport { AutocompleteArrayInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\nimport OptionRenderer from './OptionRenderer';\n\nconst MultiServerAutocompleteArrayInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  const matchSuggestion = useCallback(\n    (filterValue, choice) => choice[optionText].toLowerCase().match(filterValue.toLowerCase()),\n    [optionText]\n  );\n  return (\n    <AutocompleteArrayInput\n      matchSuggestion={matchSuggestion}\n      optionText={<OptionRenderer optionText={optionText} dataServers={dataServers} />}\n      inputText={choice => choice[optionText]}\n      {...rest}\n    />\n  );\n};\n\nexport default MultiServerAutocompleteArrayInput;\n","import React, { useCallback } from 'react';\nimport { AutocompleteInput } from 'react-admin';\nimport { useDataServers } from '@semapps/semantic-data-provider';\n\nconst MultiServerAutocompleteInput = ({ optionText, ...rest }) => {\n  const dataServers = useDataServers();\n  // We cannot use OptionRenderer like MultiServerAutocompleteArrayInput because there is a bug with AutocompleteInput\n  const optionTextWithServerName = useCallback(\n    record => {\n      if (record && dataServers) {\n        const server = Object.values(dataServers).find(server => record.id.startsWith(server.baseUrl));\n        return record[optionText] + (server ? ` (${server.name})` : '');\n      }\n    },\n    [optionText, dataServers]\n  );\n  return <AutocompleteInput optionText={optionTextWithServerName} {...rest} />;\n};\n\nexport default MultiServerAutocompleteInput;\n","import React from 'react';\nimport { TextInput } from 'react-admin';\n\nconst MultiLinesInput = props => (\n  <TextInput\n    multiline\n    minRows={2}\n    format={value => (value ? (Array.isArray(value) ? value.join('\\n') : value) : '')}\n    parse={value => value.split(/\\r?\\n/)}\n    {...props}\n  />\n);\n\nexport default MultiLinesInput;\n","import React, { useEffect } from 'react';\nimport { ReferenceArrayInput as RaReferenceArrayInput } from 'react-admin';\nimport { useController } from 'react-hook-form';\n\nconst ReferenceArrayInput = props => {\n  const { field: { value, onChange }} = useController({ name: props.source });\n\n  useEffect(() => {\n    if (value && !Array.isArray(value)) {\n      onChange([value]);\n    }\n  }, [value, onChange]);\n\n  // Wait for change to be effective before rendering component\n  // Otherwise it will be wrongly initialized and it won't work\n  if (value && !Array.isArray(value)) return null;\n\n  return <RaReferenceArrayInput {...props} />;\n};\n\nexport default ReferenceArrayInput;","import React from 'react';\nimport { ReferenceInput as RaReferenceInput } from 'react-admin';\n\nconst format = value => {\n  // If there is no value, return immediately\n  if (!value) return value;\n  // If the value is an object with an @id field, return the uri\n  return typeof value === 'object' ? value.id || value['@id'] : value;\n};\n\nconst ReferenceInput = ({ children, ...rest }) => {\n  const child = React.Children.only(children);\n  return (\n    <RaReferenceInput {...rest}>\n      {React.cloneElement(child, { format })}\n    </RaReferenceInput>\n  );\n};\n\nexport default ReferenceInput;\n"],"names":["format","v","src","Array","isArray","map","e","parse","File","rawFile","file","URL","createObjectURL","title","name","ImageInput","props","React","createElement","RaImageInput","_extends","OptionRenderer","_ref","optionText","dataServers","record","useRecordContext","server","Object","values","find","id","startsWith","baseUrl","className","style","color","MultiServerAutocompleteArrayInput","rest","_objectWithoutProperties","_excluded","useDataServers","matchSuggestion","useCallback","filterValue","choice","toLowerCase","match","AutocompleteArrayInput","inputText","MultiServerAutocompleteInput","optionTextWithServerName","AutocompleteInput","MultiLinesInput","TextInput","multiline","minRows","value","join","split","ReferenceArrayInput","_useController$field","useController","source","field","onChange","useEffect","RaReferenceArrayInput","_typeof","ReferenceInput","children","child","Children","only","RaReferenceInput","cloneElement"],"mappings":"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"}