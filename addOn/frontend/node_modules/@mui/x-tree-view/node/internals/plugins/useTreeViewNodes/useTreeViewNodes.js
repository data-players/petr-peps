"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTreeViewNodes = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _useEventCallback = _interopRequireDefault(require("@mui/utils/useEventCallback"));
var _useTreeView = require("../../useTreeView/useTreeView.utils");
var _publishTreeViewEvent = require("../../utils/publishTreeViewEvent");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const useTreeViewNodes = ({
  instance,
  params
}) => {
  const nodeMap = React.useRef({});
  const getNode = React.useCallback(nodeId => nodeMap.current[nodeId], []);
  const insertNode = React.useCallback(node => {
    nodeMap.current[node.id] = node;
  }, []);
  const removeNode = React.useCallback(nodeId => {
    const newMap = (0, _extends2.default)({}, nodeMap.current);
    delete newMap[nodeId];
    nodeMap.current = newMap;
    (0, _publishTreeViewEvent.publishTreeViewEvent)(instance, 'removeNode', {
      id: nodeId
    });
  }, [instance]);
  const isNodeDisabled = React.useCallback(nodeId => {
    if (nodeId == null) {
      return false;
    }
    let node = instance.getNode(nodeId);

    // This can be called before the node has been added to the node map.
    if (!node) {
      return false;
    }
    if (node.disabled) {
      return true;
    }
    while (node.parentId != null) {
      node = instance.getNode(node.parentId);
      if (node.disabled) {
        return true;
      }
    }
    return false;
  }, [instance]);
  const getChildrenIds = (0, _useEventCallback.default)(nodeId => Object.values(nodeMap.current).filter(node => node.parentId === nodeId).sort((a, b) => a.index - b.index).map(child => child.id));
  const getNavigableChildrenIds = nodeId => {
    let childrenIds = instance.getChildrenIds(nodeId);
    if (!params.disabledItemsFocusable) {
      childrenIds = childrenIds.filter(node => !instance.isNodeDisabled(node));
    }
    return childrenIds;
  };
  (0, _useTreeView.populateInstance)(instance, {
    getNode,
    updateNode: insertNode,
    removeNode,
    getChildrenIds,
    getNavigableChildrenIds,
    isNodeDisabled
  });
};
exports.useTreeViewNodes = useTreeViewNodes;